{"version":3,"sources":["components/loading.js","components/chessGame.js","App.js","index.js"],"names":["Loading","text","restProps","useState","label","setLabel","setTimeout","length","className","socket","io","connect","transports","upgrade","Chess","ChessGame","setConnecting","fen","setFen","on","useEffect","emit","newFen","App","ReactDOM","render","document","getElementById"],"mappings":"iOAEe,SAASA,EAAT,GAA0C,IAAvBC,EAAsB,EAAtBA,KAASC,EAAa,0BAC5BC,mBAASF,GADmB,mBAC/CG,EAD+C,KACxCC,EADwC,KAQtD,OALAC,YAAW,WACY,IAAjBF,EAAMG,OAAcF,EAAS,IAC5BA,EAASD,EAAQ,OACrB,KAGD,8CAAKI,UAAU,6BAAgCN,GAA/C,cACE,qBAAKM,UAAU,+BACdP,EACAG,MCNP,IAAMK,EAASC,KAAGC,QAAQ,wBAAyB,CACjDC,WAAY,CAAC,aACbC,SAAS,IAGG,IAAIC,IAEH,SAASC,IAAa,IAAD,EACEZ,oBAAS,GADX,mBACfa,GADe,aAEFb,qBAFE,gCAGIA,sBAHJ,gCAIZA,mBAAS,KAJG,mBAI3Bc,EAJ2B,KAItBC,EAJsB,OAKQf,oBAAS,GALjB,6BAOlCM,EAAOU,GAAG,WAAW,WACnBH,GAAc,MAIhBI,qBAAU,WACRX,EAAOY,KAAK,MAAOJ,KAClB,CAACA,IAGJG,qBAAU,WACRX,EAAOU,GAAG,OAAO,SAACG,GAChBJ,EAAOI,QAER,CAACJ,IA6DJ,OACE,qBAAKV,UAAU,qDAAf,SACE,cAACR,EAAD,CACEQ,UAAU,6CACVP,KAAK,iBClGE,SAASsB,IACtB,OACE,mCACE,cAACR,EAAD,M,OCDNS,IAASC,OACP,mCACE,cAACF,EAAD,MAEFG,SAASC,eAAe,W","file":"static/js/main.bae8407c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function Loading({ text, ...restProps }) {\r\n  const [label, setLabel] = useState(text);\r\n\r\n  setTimeout(() => {\r\n    if (label.length === 3) setLabel(\"\");\r\n    else setLabel(label + \".\");\r\n  }, 800);\r\n\r\n  return (\r\n    <div className=\"flex flex-col text-center\" {...restProps}>\r\n      <div className=\"loading-icon w-full h-full\" />\r\n      {text}\r\n      {label}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport Chess from \"chess.js\";\r\nimport Chessground from \"react-chessground\";\r\nimport \"react-chessground/dist/styles/chessground.css\";\r\nimport Modal from \"./modal\";\r\nimport Loading from \"./loading\";\r\n\r\nconst socket = io.connect(\"http://localhost:4000\", {\r\n  transports: [\"websocket\"],\r\n  upgrade: false,\r\n});\r\n\r\nconst chess = new Chess();\r\n\r\nexport default function ChessGame() {\r\n  const [connecting, setConnecting] = useState(true);\r\n  const [lastMove, setLastMove] = useState();\r\n  const [pendingMove, setPendingMove] = useState();\r\n  const [fen, setFen] = useState(\"\");\r\n  const [selectVisible, setSelectVisible] = useState(false);\r\n\r\n  socket.on(\"connect\", () => {\r\n    setConnecting(false);\r\n  });\r\n\r\n  // Send fen to server\r\n  useEffect(() => {\r\n    socket.emit(\"msg\", fen);\r\n  }, [fen]);\r\n\r\n  // Recieve fen from server\r\n  useEffect(() => {\r\n    socket.on(\"msg\", (newFen) => {\r\n      setFen(newFen);\r\n    });\r\n  }, [setFen]);\r\n\r\n  const onMove = (from, to) => {\r\n    const moves = chess.moves({ verbose: true });\r\n    for (let i = 0, len = moves.length; i < len; i++) {\r\n      if (moves[i].flags.indexOf(\"p\") !== -1 && moves[i].from === from) {\r\n        setPendingMove([from, to]);\r\n        setSelectVisible(true);\r\n        return;\r\n      }\r\n    }\r\n    if (chess.move({ from, to, promotion: \"x\" })) {\r\n      setFen(chess.fen());\r\n      setLastMove([from, to]);\r\n      setTimeout(randomMove, 500);\r\n    }\r\n  };\r\n\r\n  const randomMove = () => {\r\n    const moves = chess.moves({ verbose: true });\r\n    const move = moves[Math.floor(Math.random() * moves.length)];\r\n    if (moves.length > 0) {\r\n      chess.move(move.san);\r\n      setFen(chess.fen());\r\n      setLastMove([move.from, move.to]);\r\n    }\r\n  };\r\n\r\n  const promotion = (piece) => {\r\n    const from = pendingMove[0];\r\n    const to = pendingMove[1];\r\n    chess.move({ from, to, promotion: piece });\r\n    setFen(chess.fen());\r\n    setLastMove([from, to]);\r\n    setSelectVisible(false);\r\n    setTimeout(randomMove, 500);\r\n  };\r\n\r\n  const turnColor = () => {\r\n    return chess.turn() === \"w\" ? \"white\" : \"black\";\r\n  };\r\n\r\n  const calcMovable = () => {\r\n    const dests = new Map();\r\n    chess.SQUARES.forEach((square) => {\r\n      const moves = chess.moves({ square, verbose: true });\r\n      if (moves.length) {\r\n        dests.set(\r\n          square,\r\n          moves.map((move) => move.to)\r\n        );\r\n      }\r\n    });\r\n\r\n    return {\r\n      free: false,\r\n      dests,\r\n      color: \"white\",\r\n    };\r\n  };\r\n\r\n  return true ? (\r\n    <div className=\"h-screen w-screen flex justify-center items-center\">\r\n      <Loading\r\n        className=\"w-32 h-32 text-blue-600 font-bold text-2xl\"\r\n        text=\"Connecting\"\r\n      />\r\n    </div>\r\n  ) : (\r\n    <div className=\"bg-white h-screen flex justify-center items-center\">\r\n      <Chessground\r\n        width=\"40vw\"\r\n        height=\"40vw\"\r\n        turnColor={turnColor()}\r\n        movable={calcMovable()}\r\n        lastMove={lastMove}\r\n        fen={fen}\r\n        onMove={onMove}\r\n      />\r\n      <Modal visible={selectVisible}>\r\n        {[\"q\", \"r\", \"b\", \"n\"].map((piece) => (\r\n          <div className=\"group flex justify-center items-center w-24 h-24 transition-all rounded-full transform hover:bg-blue-500 hover:scale-110\">\r\n            <div\r\n              onClick={() => promotion(piece)}\r\n              className={`piece ${turnColor()}-${piece} w-5/6 h-5/6 transition-all transform group-hover:-translate-y-1`}\r\n              key={piece}\r\n            />\r\n          </div>\r\n        ))}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ChessGame from \"./components/chessGame\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n      <ChessGame />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App />\r\n  </>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}
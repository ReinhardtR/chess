[{"C:\\Users\\PGN\\Desktop\\VSC\\chess\\client\\src\\index.js":"1","C:\\Users\\PGN\\Desktop\\VSC\\chess\\client\\src\\App.js":"2","C:\\Users\\PGN\\Desktop\\VSC\\chess\\client\\src\\components\\chessGame.js":"3","C:\\Users\\PGN\\Desktop\\VSC\\chess\\client\\src\\components\\loading.js":"4","C:\\Users\\PGN\\Desktop\\VSC\\chess\\client\\src\\components\\modal.js":"5"},{"size":198,"mtime":1608529011185,"results":"6","hashOfConfig":"7"},{"size":171,"mtime":1608529461287,"results":"8","hashOfConfig":"7"},{"size":3615,"mtime":1608544406262,"results":"9","hashOfConfig":"7"},{"size":442,"mtime":1608544487375,"results":"10","hashOfConfig":"7"},{"size":1306,"mtime":1608539632901,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1l20wsi",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\PGN\\Desktop\\VSC\\chess\\client\\src\\index.js",[],["24","25"],"C:\\Users\\PGN\\Desktop\\VSC\\chess\\client\\src\\App.js",[],"C:\\Users\\PGN\\Desktop\\VSC\\chess\\client\\src\\components\\chessGame.js",["26"],"import React, { useState, useEffect } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport Chess from \"chess.js\";\r\nimport Chessground from \"react-chessground\";\r\nimport \"react-chessground/dist/styles/chessground.css\";\r\nimport Modal from \"./modal\";\r\nimport Loading from \"./loading\";\r\n\r\nconst socket = io.connect(\"http://localhost:4000\", {\r\n  transports: [\"websocket\"],\r\n  upgrade: false,\r\n});\r\n\r\nconst chess = new Chess();\r\n\r\nexport default function ChessGame() {\r\n  const [connecting, setConnecting] = useState(true);\r\n  const [lastMove, setLastMove] = useState();\r\n  const [pendingMove, setPendingMove] = useState();\r\n  const [fen, setFen] = useState(\"\");\r\n  const [selectVisible, setSelectVisible] = useState(false);\r\n\r\n  socket.on(\"connect\", () => {\r\n    setConnecting(false);\r\n  });\r\n\r\n  // Send fen to server\r\n  useEffect(() => {\r\n    socket.emit(\"msg\", fen);\r\n  }, [fen]);\r\n\r\n  // Recieve fen from server\r\n  useEffect(() => {\r\n    socket.on(\"msg\", (newFen) => {\r\n      setFen(newFen);\r\n    });\r\n  }, [setFen]);\r\n\r\n  const onMove = (from, to) => {\r\n    const moves = chess.moves({ verbose: true });\r\n    for (let i = 0, len = moves.length; i < len; i++) {\r\n      if (moves[i].flags.indexOf(\"p\") !== -1 && moves[i].from === from) {\r\n        setPendingMove([from, to]);\r\n        setSelectVisible(true);\r\n        return;\r\n      }\r\n    }\r\n    if (chess.move({ from, to, promotion: \"x\" })) {\r\n      setFen(chess.fen());\r\n      setLastMove([from, to]);\r\n      setTimeout(randomMove, 500);\r\n    }\r\n  };\r\n\r\n  const randomMove = () => {\r\n    const moves = chess.moves({ verbose: true });\r\n    const move = moves[Math.floor(Math.random() * moves.length)];\r\n    if (moves.length > 0) {\r\n      chess.move(move.san);\r\n      setFen(chess.fen());\r\n      setLastMove([move.from, move.to]);\r\n    }\r\n  };\r\n\r\n  const promotion = (piece) => {\r\n    const from = pendingMove[0];\r\n    const to = pendingMove[1];\r\n    chess.move({ from, to, promotion: piece });\r\n    setFen(chess.fen());\r\n    setLastMove([from, to]);\r\n    setSelectVisible(false);\r\n    setTimeout(randomMove, 500);\r\n  };\r\n\r\n  const turnColor = () => {\r\n    return chess.turn() === \"w\" ? \"white\" : \"black\";\r\n  };\r\n\r\n  const calcMovable = () => {\r\n    const dests = new Map();\r\n    chess.SQUARES.forEach((square) => {\r\n      const moves = chess.moves({ square, verbose: true });\r\n      if (moves.length) {\r\n        dests.set(\r\n          square,\r\n          moves.map((move) => move.to)\r\n        );\r\n      }\r\n    });\r\n\r\n    return {\r\n      free: false,\r\n      dests,\r\n      color: \"white\",\r\n    };\r\n  };\r\n\r\n  return true ? (\r\n    <div className=\"h-screen w-screen flex justify-center items-center\">\r\n      <Loading\r\n        className=\"w-32 h-32 text-blue-600 font-bold text-2xl\"\r\n        text=\"Connecting\"\r\n      />\r\n    </div>\r\n  ) : (\r\n    <div className=\"bg-white h-screen flex justify-center items-center\">\r\n      <Chessground\r\n        width=\"40vw\"\r\n        height=\"40vw\"\r\n        turnColor={turnColor()}\r\n        movable={calcMovable()}\r\n        lastMove={lastMove}\r\n        fen={fen}\r\n        onMove={onMove}\r\n      />\r\n      <Modal visible={selectVisible}>\r\n        {[\"q\", \"r\", \"b\", \"n\"].map((piece) => (\r\n          <div className=\"group flex justify-center items-center w-24 h-24 transition-all rounded-full transform hover:bg-blue-500 hover:scale-110\">\r\n            <div\r\n              onClick={() => promotion(piece)}\r\n              className={`piece ${turnColor()}-${piece} w-5/6 h-5/6 transition-all transform group-hover:-translate-y-1`}\r\n              key={piece}\r\n            />\r\n          </div>\r\n        ))}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\PGN\\Desktop\\VSC\\chess\\client\\src\\components\\loading.js",[],"C:\\Users\\PGN\\Desktop\\VSC\\chess\\client\\src\\components\\modal.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":17,"column":10,"nodeType":"33","messageId":"34","endLine":17,"endColumn":20},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'connecting' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]